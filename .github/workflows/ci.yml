name: Spring Boot CI Pipeline

on:
  push:
    branches: ["master"]

jobs:
  build:
    name: Build
    runs-on: self-hosted
    outputs:
      s3_key: ${{ steps.upload.outputs.s3_key }} # expose step output as job output

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Run Tests
        run: mvn test

      - name: Prepare release artifact
        run: mvn clean package -DskipTests

      - name: Upload JAR to S3
        id: upload
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: |
          set -e
          # choose a deterministic filename (timestamp + run id) so you can keep history
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          ARTIFACT_NAME="app-${TIMESTAMP}.jar"
          # find the jar (adjust pattern if your artifact has classifier or different name)
          JAR_PATH=$(ls target/*.jar | head -n1) || { echo "No jar found in target/"; exit 1; }
          echo "Uploading $JAR_PATH to s3://$S3_BUCKET/releases/$ARTIFACT_NAME"
          aws s3 cp "$JAR_PATH" "s3://$S3_BUCKET/releases/$ARTIFACT_NAME"
          S3_KEY=releases/$ARTIFACT_NAME
          # Write step output (note the special GITHUB_OUTPUT file)
          echo "s3_key=$S3_KEY" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to EC2
    runs-on: self-hosted
    needs: build

    steps:
      - name: Show the S3 key from build
        run: echo "S3 key is ${{ needs.build.outputs.s3_key }}"

      - name: Download artifact from S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: |
          set -e
          S3_KEY="${{ needs.build.outputs.s3_key }}"
          aws s3 cp "s3://$S3_BUCKET/$S3_KEY" ./artifact/app.jar
          ls -l artifact

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Upload artifact to server and deploy
        run: |
          scp ./artifact/app.jar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/app.jar
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            mkdir -p ~/deploy/releases
            mv /tmp/app.jar ~/deploy/releases
            sudo systemctl restart myapp.service
          EOF
